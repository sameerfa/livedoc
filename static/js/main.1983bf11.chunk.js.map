{"version":3,"sources":["TextEditor.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["TOOLBAR_OPTIONS","title","header","font","list","color","background","script","align","TextEditor","documentId","useParams","id","useState","socket","setSocket","quill","setQuill","useEffect","s","io","disconnect","once","document","setContents","enable","emit","interval","setInterval","getContents","clearInterval","handler","delta","updateContents","on","off","oldDelta","source","wrapperRef","useCallback","wrapper","innerHTML","editor","createElement","append","q","Quill","theme","modules","toolbar","disable","setText","className","ref","Footer","modal","setModal","copied","setCopied","href","Button","GitHub","onClick","window","print","Print","Info","navigator","clipboard","writeText","location","App","basename","path","exact","to","uuidV4","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1983bf11.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\r\nimport Quill from \"quill\";\r\nimport \"quill/dist/quill.snow.css\";\r\nimport { io } from \"socket.io-client\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst SAVE_INTERVAL_MS = 2000;\r\nconst TOOLBAR_OPTIONS = [\r\n  [{ title: \"LiveDoc\" }],\r\n  [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n  [{ font: [] }],\r\n  [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n  [\"bold\", \"italic\", \"underline\"],\r\n  [{ color: [] }, { background: [] }],\r\n  [{ script: \"sub\" }, { script: \"super\" }],\r\n  [{ align: [] }],\r\n  [\"link\", \"image\", \"blockquote\", \"code-block\"],\r\n  [\"clean\"],\r\n];\r\n\r\nexport default function TextEditor() {\r\n  const { id: documentId } = useParams();\r\n  const [socket, setSocket] = useState();\r\n  const [quill, setQuill] = useState();\r\n\r\n  useEffect(() => {\r\n    const s = io(\"https://livedoc-socket.herokuapp.com\");\r\n    setSocket(s);\r\n\r\n    return () => {\r\n      s.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (socket == null || quill == null) return;\r\n\r\n    socket.once(\"load-document\", (document) => {\r\n      quill.setContents(document);\r\n      quill.enable();\r\n    });\r\n\r\n    socket.emit(\"get-document\", documentId);\r\n  }, [socket, quill, documentId]);\r\n\r\n  useEffect(() => {\r\n    if (socket == null || quill == null) return;\r\n\r\n    const interval = setInterval(() => {\r\n      socket.emit(\"save-document\", quill.getContents());\r\n    }, SAVE_INTERVAL_MS);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [socket, quill]);\r\n\r\n  useEffect(() => {\r\n    if (socket == null || quill == null) return;\r\n\r\n    const handler = (delta) => {\r\n      quill.updateContents(delta);\r\n    };\r\n    socket.on(\"receive-changes\", handler);\r\n\r\n    return () => {\r\n      socket.off(\"receive-changes\", handler);\r\n    };\r\n  }, [socket, quill]);\r\n\r\n  useEffect(() => {\r\n    if (socket == null || quill == null) return;\r\n\r\n    const handler = (delta, oldDelta, source) => {\r\n      if (source !== \"user\") return;\r\n      socket.emit(\"send-changes\", delta);\r\n    };\r\n    quill.on(\"text-change\", handler);\r\n\r\n    return () => {\r\n      quill.off(\"text-change\", handler);\r\n    };\r\n  }, [socket, quill]);\r\n\r\n  const wrapperRef = useCallback((wrapper) => {\r\n    if (wrapper == null) return;\r\n\r\n    wrapper.innerHTML = \"\";\r\n    const editor = document.createElement(\"div\");\r\n    wrapper.append(editor);\r\n    const q = new Quill(editor, {\r\n      theme: \"snow\",\r\n      modules: { toolbar: TOOLBAR_OPTIONS },\r\n    });\r\n    q.disable();\r\n    q.setText(\"Loading...\");\r\n    setQuill(q);\r\n  }, []);\r\n  return <div className=\"container\" ref={wrapperRef}></div>;\r\n}\r\n","import { Button } from \"@material-ui/core\";\r\nimport { GitHub, Print, Info } from \"@material-ui/icons\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Footer() {\r\n  const [modal, setModal] = useState(true);\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const print = () => {\r\n    window.print();\r\n  };\r\n  const copy = () => {\r\n    navigator.clipboard.writeText(window.location.href);\r\n    setCopied(true);\r\n  };\r\n  return (\r\n    <div className=\"footer\">\r\n      <h1>LiveDoc</h1>\r\n      <a href=\"https://github.com/sameerfa/livedoc/tree/master\">\r\n        <Button>\r\n          <GitHub />\r\n        </Button>\r\n      </a>\r\n      <Button onClick={print}>\r\n        <Print />\r\n      </Button>\r\n      <Button onClick={() => setModal(true)}>\r\n        <Info />\r\n      </Button>\r\n      {modal ? (\r\n        <div className=\"modal\">\r\n          <h2>Howdy, partner!</h2>\r\n          <ul>\r\n            <li>\r\n              You can share this document with your friends to collaborate live.\r\n            </li>\r\n            <li>\r\n              Data will be saved for a week. You can access it using the same\r\n              link.\r\n            </li>\r\n            <li>You can download/ print file as PDF too.</li>\r\n          </ul>\r\n          <div>\r\n            <Button className=\"button\" onClick={copy}>\r\n              {copied ? \"Copied!\" : \"Copy Link\"}\r\n            </Button>\r\n            <Button\r\n              className=\"button\"\r\n              onClick={() => {\r\n                setModal(false);\r\n                setCopied(false);\r\n              }}\r\n            >\r\n              Okay, Cool!\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","import TextEditor from \"./TextEditor\";\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport Footer from \"./Footer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename=\"/\">\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <Redirect to={`/documents/${uuidV4()}`} />\r\n        </Route>\r\n        <Route path=\"/documents/:id\">\r\n          <TextEditor />\r\n        </Route>\r\n      </Switch>\r\n      <Footer />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    //process.env.NODE_ENV === 'production' && \r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./styles.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}